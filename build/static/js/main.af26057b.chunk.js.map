{"version":3,"sources":["context/AppReducer.js","context/GlobalState.js","comp/Task.js","comp/Tasks.js","comp/AddTask.js","comp/RandomTask.js","comp/Header.js","App.js","index.js"],"names":["state","action","type","tasks","filter","task","id","payload","initialState","taskName","taskDesc","taskLvl","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTask","addTask","Task","useContext","Card","className","Body","Title","style","color","priorityBackground","Text","Button","variant","onClick","Tasks","map","key","FormTextInput","label","props","useField","field","meta","Group","Label","htmlFor","Control","touched","error","FormTextAreaInput","as","FormSelectInput","AddTask","useState","show","setShow","handleClose","initialValues","validationSchema","Yup","required","onSubmit","values","setSubmitting","resetForm","setTimeout","newTask","Math","floor","random","Modal","onHide","backdrop","keyboard","Header","closeButton","name","placeholder","ModalFooter","isSubmitting","RandomTasks","init","length","setRandom","to","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af26057b.chunk.js","sourcesContent":["export default (state, action) => {\r\n    switch (action.type) {\r\n        case \"DELETE_TASK\":\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter(task => task.id !== action.payload)\r\n            }\r\n        case \"ADD_TASK\":\r\n            return {\r\n                ...state,\r\n                tasks: [action.payload, ...state.tasks]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import React, { createContext, useReducer } from 'react'\r\nimport AppReducer from \"./AppReducer\"\r\n\r\nconst initialState = {\r\n    tasks: [\r\n        { id: 1, taskName: \"Shopping\", taskDesc: \"Go to the shops and buy some bread and milk.\", taskLvl: \"High\" },\r\n        { id: 2, taskName: \"Disertation\", taskDesc: \"Remember to hand in disertation.\", taskLvl: \"Medium\" },\r\n        { id: 3, taskName: \"MOT\", taskDesc: \"Drop car off at Garage for MOT.\", taskLvl: \"Low\" }\r\n    ]\r\n}\r\n\r\nexport const GlobalContext = createContext(initialState)\r\n\r\nexport const GlobalProvider = ({ children }) => {\r\n\r\n    const [state, dispatch] = useReducer(AppReducer, initialState)\r\n\r\n    const addTask = task => {\r\n        dispatch({ type: \"ADD_TASK\", payload: task })\r\n    }\r\n\r\n    const deleteTask = (id) => {\r\n        dispatch({ type: \"DELETE_TASK\", payload: id })\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider\r\n            value={{\r\n                tasks: state.tasks,\r\n                deleteTask,\r\n                addTask\r\n            }}>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from \"../context/GlobalState\"\r\nimport { Card, Button } from \"react-bootstrap\"\r\n\r\nexport const Task = ({ task }) => {\r\n    const { deleteTask } = useContext(GlobalContext)\r\n\r\n    const priorityBackground = () => {\r\n        switch (task.taskLvl) {\r\n            case \"High\":\r\n                return { color: \"Red\" }\r\n            case \"Medium\":\r\n                return { color: \"Orange\" }\r\n            case \"Low\":\r\n                return { color: \"Green\" }\r\n            default:\r\n                return { color: \"White\" }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card className=\"taskDiv\">\r\n            <Card.Body>\r\n                <Card.Title style={priorityBackground()}>{task.taskName}</Card.Title>\r\n                <Card.Text>\r\n                    {task.taskDesc}\r\n                </Card.Text>\r\n                <Button variant=\"danger\" onClick={() => deleteTask(task.id)}>Delete Task</Button>\r\n            </Card.Body>\r\n        </Card >\r\n\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { GlobalContext } from \"../context/GlobalState\"\r\nimport { Task } from \"./Task\"\r\n\r\nexport const Tasks = () => {\r\n    const { tasks } = useContext(GlobalContext)\r\n\r\n    return (\r\n        <div>\r\n            {tasks.map(task => (\r\n                <Task key={task.id} task={task} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useContext } from 'react'\r\nimport { GlobalContext } from \"../context/GlobalState\"\r\nimport { Modal, Button, Form as BForm, ModalFooter } from \"react-bootstrap\"\r\nimport { Formik, useField, Form } from 'formik'\r\nimport * as Yup from \"yup\"\r\n\r\n\r\nconst FormTextInput = ({ label, ...props }) => {\r\n    const [field, meta] = useField(props)\r\n    return (\r\n        <BForm.Group>\r\n            <BForm.Label htmlFor={props.id}>{label}</BForm.Label>\r\n            <BForm.Control className=\"text-input\" {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <div className=\"error\" style={{ color: \"red\" }}>{label} is {meta.error}</div>\r\n            ) : null}\r\n        </BForm.Group>\r\n    )\r\n}\r\n\r\nconst FormTextAreaInput = ({ label, ...props }) => {\r\n    const [field, meta] = useField(props)\r\n    return (\r\n        <BForm.Group>\r\n            <BForm.Label htmlFor={props.id}>{label}</BForm.Label>\r\n            <BForm.Control as={props.type} className=\"text-input\" {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <div className=\"error\" style={{ color: \"red\" }}>{label} is {meta.error}</div>\r\n            ) : null}\r\n        </BForm.Group>\r\n    )\r\n}\r\n\r\nconst FormSelectInput = ({ label, ...props }) => {\r\n    const [field, meta] = useField(props)\r\n    return (\r\n        <BForm.Group>\r\n            <BForm.Label htmlFor={props.id}>{label}</BForm.Label>\r\n            <BForm.Control as={props.type} className=\"text-input\" {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <div className=\"error\" style={{ color: \"red\" }}>{label} is {meta.error}</div>\r\n            ) : null}\r\n        </BForm.Group>\r\n    )\r\n}\r\n\r\nexport const AddTask = () => {\r\n\r\n    // const [taskItem, setTaskItem] = useState(\r\n    //     {\r\n    //         taskName: \"\",\r\n    //         taskDesc: \"\",\r\n    //         taskLvl: \"\"\r\n    //     }\r\n    // )\r\n\r\n    const { addTask } = useContext(GlobalContext)\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    // const handleChange = (e) => {\r\n    //     const { name, value } = e.target\r\n    //     setTaskItem({ ...taskItem, [name]: value })\r\n    // }\r\n\r\n\r\n\r\n    // const handleSubmit = (e) => {\r\n    //     e.preventDefault()\r\n    //     const { taskName, taskDesc, taskLvl } = taskItem\r\n\r\n    //     if (taskName || taskDesc || taskLvl === \"\") {\r\n    //         //alert popup\r\n    //         console.log(\"Enter some information\")\r\n    //     } else {\r\n    //         const newTask = {\r\n    //             id: Math.floor(Math.random() * 10000),\r\n    //             taskName,\r\n    //             taskDesc,\r\n    //             taskLvl\r\n    //         }\r\n    //         addTask(newTask)\r\n    //     }\r\n\r\n    // }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Button className=\"addTaskButton\" variant=\"primary\" onClick={handleShow}>\r\n                Add A Task\r\n      </Button>\r\n\r\n            <Formik\r\n                initialValues={{\r\n                    taskName: \"\",\r\n                    taskDesc: \"\",\r\n                    taskLvl: \"\"\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    taskName: Yup.string().required(\"Required\"),\r\n                    taskDesc: Yup.string().required(\"Required\"),\r\n                    taskLvl: Yup.string().required(\"Required\"),\r\n                })}\r\n                onSubmit={(values, { setSubmitting, resetForm }) => {\r\n                    setTimeout(() => {\r\n                        const { taskName, taskDesc, taskLvl } = values\r\n                        const newTask = {\r\n                            id: Math.floor(Math.random() * 10000),\r\n                            taskName,\r\n                            taskDesc,\r\n                            taskLvl,\r\n                        }\r\n                        addTask(newTask)\r\n                        //console.log(JSON.stringify(values, null, 2))\r\n                        resetForm()\r\n                        setSubmitting(false)\r\n                    }, 1000)\r\n                }}\r\n            >\r\n                {props => (\r\n\r\n                    <Modal\r\n                        show={show}\r\n                        onHide={handleClose}\r\n                        backdrop=\"static\"\r\n                        keyboard={false}\r\n                    ><Form>\r\n                            <Modal.Header closeButton>\r\n                                <Modal.Title>Add A Task</Modal.Title>\r\n                            </Modal.Header>\r\n\r\n                            <Modal.Body>\r\n\r\n                                <FormTextInput\r\n                                    label=\"Title\"\r\n                                    name=\"taskName\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Enter a Title\" />\r\n                                <FormTextAreaInput\r\n                                    label=\"Descripton\"\r\n                                    name=\"taskDesc\"\r\n                                    type=\"textarea\"\r\n                                    placeholder=\"Enter a Descripton\" />\r\n                                <FormSelectInput\r\n                                    label=\"Priority\"\r\n                                    name=\"taskLvl\"\r\n                                    type=\"select\"\r\n                                >\r\n                                    <option value=\"Select Priority\">-- Select Priority --</option>\r\n                                    <option value=\"Low\">Low</option>\r\n                                    <option value=\"Medium\">Medium</option>\r\n                                    <option value=\"High\">High</option>\r\n                                </FormSelectInput>\r\n\r\n\r\n\r\n                            </Modal.Body>\r\n                            <ModalFooter>\r\n                                <Button type=\"submit\">{props.isSubmitting ? \"Loading...\" : \"Submit\"}</Button>\r\n                            </ModalFooter>\r\n                        </Form>\r\n                    </Modal>\r\n\r\n                )}\r\n\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React, { useContext, useState } from 'react'\r\nimport { GlobalContext } from \"../context/GlobalState\"\r\nimport { Task } from \"./Task\"\r\nimport { Button } from 'react-bootstrap';\r\nimport { useEffect } from 'react';\r\n\r\n\r\nexport const RandomTasks = () => {\r\n\r\n    const { tasks } = useContext(GlobalContext)\r\n\r\n    const init = tasks[Math.floor(Math.random() * tasks.length)]\r\n    const [random, setRandom] = useState(init)\r\n    const randomiser = () => {\r\n        setRandom(tasks[Math.floor(Math.random() * tasks.length)])\r\n    }\r\n\r\n    return (\r\n        <div id=\"random-container\">\r\n            <Button className=\"randomButton\" onClick={randomiser}>Randomise</Button>\r\n            {tasks.map(task => {\r\n                return task.id === random.id ? <Task key={task.id} task={task} /> : null\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nfunction Header() {\r\n\r\n    return (\r\n        <header>\r\n            <Link to=\"/\"><h2>Random Task</h2></Link>\r\n            <Link to=\"/view\"><h3>View Tasks</h3></Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nimport { GlobalProvider } from \"./context/GlobalState\"\nimport { Tasks } from './comp/Tasks';\nimport { AddTask } from './comp/AddTask';\nimport { RandomTasks } from './comp/RandomTask';\nimport { Switch, Route } from 'react-router-dom'\nimport Header from './comp/Header';\n\n\nfunction App() {\n\n  return (\n    <GlobalProvider>\n      <Header />\n      <main>\n        <Switch>\n          <Route exact path=\"/view\">\n            <AddTask />\n            <Tasks />\n          </Route>\n          <Route exact path=\"/\">\n            <RandomTasks />\n          </Route>\n        </Switch>\n      </main>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}